---
# IOS Show interfaces trunk Parser
#
# Command: show interfaces trunk
#
#
# Example Command Output:
# ----------------------
# cisco1#show interfaces trunk
#
# Port        Mode             Encapsulation  Status        Native vlan
# Gi1/0/49    on               802.1q         trunking      1
# Te1/0/2     on               802.1q         trunking      1
#
# Port        Vlans allowed on trunk
# Gi1/0/49    1-4094
# Te1/0/2     1-4094
#
# Port        Vlans allowed and active in management domain
# Gi1/0/49    1-2,4-6,10,20,40,49-51,55-56,60-62,69,80,100,200,210-213,300,310,400,410,902-903,915,920-922
# Te1/0/2     1-2,4-6,10,20,40,49-51,55-56,60-62,69,80,100,200,210-213,300,310,400,410,902-903,915,920-922
#
# Port        Vlans in spanning tree forwarding state and not pruned
# Gi1/0/49    1-2,4-6,10,20,40,49-51,55-56,60-62,69,80,100,200,210-213,300,310,400,410,902-903,915,920-922
# Te1/0/2     1,6,10,40,51,400,410
#
#Example Playbook
#-----------------
# - hosts: localhost
#   connection: local
#   tasks:
# - name: get show interface trunk
#   ios_command:
#     commands:
#       - show interfaces trunk
#   register: trunk_output
#
# - name: create fact based on switchport_output
#   set_fact:
#     ios_trunk: "{{ trunk_output.stdout[0] | parse_cli('cli_filters/ios/ios_show_int_trunk.yml') }}"
#
# Schema Output
# -------------
#
# ok: [cisco01] => {
#     "ansible_facts": {
#         "ios_trunk": [
#         {
#             "interface": "FastEthernet0/1"
#         },
#         {
#             "interface": "FastEthernet0/2"
#         }
#     ]
# }
#
vars:
  trunk:
    interface: "{{ item.interface | replace('Gi', 'GigabitEthernet') | replace('Te', 'TenGigabitEthernet') }}"

keys:
  trunks:
    type: list
    value: "{{ trunk }}"
    items: "^(?P<interface>[a-zA-Z0-9/]+).*(?P<state>trunking)"
